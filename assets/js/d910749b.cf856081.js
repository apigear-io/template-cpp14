"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[36],{7849:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>s,default:()=>u,frontMatter:()=>l,metadata:()=>p,toc:()=>d});var a=n(7462),o=(n(7294),n(3905)),i=n(814),r=n(7784);n.p;const l={sidebar_position:3},s="MQTT",p={unversionedId:"features/mqtt",id:"features/mqtt",title:"MQTT",description:"This is an experimental feature. It contains smallest working set of functionalities to adapt the generated interface for using over the network with MQTT protocol.",source:"@site/docs/features/mqtt.md",sourceDirName:"features",slug:"/features/mqtt",permalink:"/template-cpp14/features/mqtt",draft:!1,editUrl:"https://github.com/apigear-io/template-cpp14/edit/main/docs/features/mqtt.md",tags:[],version:"current",lastUpdatedBy:"dphan10",lastUpdatedAt:1700746132,formattedLastUpdatedAt:"Nov 23, 2023",sidebarPosition:3,frontMatter:{sidebar_position:3},sidebar:"docsSidebar",previous:{title:"Stubs",permalink:"/template-cpp14/features/stubs"},next:{title:"Olink",permalink:"/template-cpp14/features/olink"}},c={},d=[{value:"File overview for module",id:"file-overview-for-module",level:2},{value:"Apiger MQTT - The Network Layer",id:"apiger-mqtt---the-network-layer",level:3},{value:"MQTT Client Adapter",id:"mqtt-client-adapter",level:3},{value:"Properties",id:"properties",level:4},{value:"Operations",id:"operations",level:4},{value:"Signals",id:"signals",level:4},{value:"Use <code>HelloClient</code>",id:"use-helloclient",level:4},{value:"MQTT Server Adapter",id:"mqtt-server-adapter",level:3},{value:"Properties",id:"properties-1",level:4},{value:"Operations",id:"operations-1",level:4},{value:"Signals",id:"signals-1",level:4},{value:"Use <code>HelloService</code>",id:"use-helloservice",level:4},{value:"MQTT Messages",id:"mqtt-messages",level:3}],h={toc:d},m="wrapper";function u(e){let{components:t,...l}=e;return(0,o.kt)(m,(0,a.Z)({},h,l,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"mqtt"},"MQTT"),(0,o.kt)("admonition",{type:"caution"},(0,o.kt)("p",{parentName:"admonition"},"This is an experimental feature. It contains smallest working set of functionalities to adapt the generated interface for using over the network with MQTT protocol.\nIt doesn't include the security. The error handling is minimal. It is not production ready.\nPlease also check issues on github for this template.")),(0,o.kt)("admonition",{type:"note"},(0,o.kt)("p",{parentName:"admonition"},"A ",(0,o.kt)("a",{parentName:"p",href:"https://eclipse.dev/paho/index.php?page=clients/python/index.php"},"PAHO")," library is used to implement MQTT in this library. It has significant performance limitations for high load.\nIf you need to use MQTT in high load application consider using our qt template - currently seems to be working much better.")),(0,o.kt)("p",null,"This feature purpose is not only to help you introduce MQTT protocol into your project, but also show that an existing protocol can be adapted for sharing your data in your ecosystem. When going through this document you may notice this implementation contains general client/server adapters in \ud83d\udcc2hello-world/apigear/mqtt\nand an interface specific part generated from templates for each interface in  ",(0,o.kt)("inlineCode",{parentName:"p"},"\ud83d\udcc2hello-world/cpp_hello_world/modules/io_world_module/generated/mqtt"),". ",(0,o.kt)("br",null)," ",(0,o.kt)("br",null),"\nThis feature provides a ",(0,o.kt)("em",{parentName:"p"},"client")," and a ",(0,o.kt)("em",{parentName:"p"},"service")," adapter for your interfaces for the MQTT protocol. It allows you to connect different applications in the same or different technologies (check all of our ",(0,o.kt)("a",{parentName:"p",href:"https://docs.apigear.io/docs/category/sdk-templates"},"templates"),").",(0,o.kt)("br",null),"\nUse an ",(0,o.kt)("em",{parentName:"p"},"Mqtt client")," instead of your interface implementation to be able to receive data from remote service. ",(0,o.kt)("br",null),"\nUse an ",(0,o.kt)("em",{parentName:"p"},"Mqtt server adapter")," to expose your interface implementation as a remote service.",(0,o.kt)("br",null)),(0,o.kt)("admonition",{type:"tip"},(0,o.kt)("p",{parentName:"admonition"},"The MQTT broker is not provided with implementation. To be able to run client and service you need to run a broker of your choice.")),(0,o.kt)("admonition",{type:"caution"},(0,o.kt)("p",{parentName:"admonition"}," In this library we use STL classes in public interfaces.\nWe assume that this library is built from source (configuration provided by generated CMakeLists).\nOtherwise, it has to be ensured that your build configuration matches the library build configuration.")),(0,o.kt)("h2",{id:"file-overview-for-module"},"File overview for module"),(0,o.kt)("p",null," With an example  API"),(0,o.kt)("details",null,(0,o.kt)("summary",null,"Hello World API (click to expand)"),(0,o.kt)(i.Z,{language:"yaml",showLineNumbers:!0,mdxType:"CodeBlock"},r.Z)),(0,o.kt)("p",null,"the following file structure will be generated. The purpose and content of each file is explained below."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash",metastring:"{6,21}","{6,21}":!0},"\ud83d\udcc2hello-world\n \u2523 \ud83d\udcc2apigear\n \u2503 ...\n \u2523 \ud83d\udcc2cpp_hello_world\n \u2503 \u2523 \ud83d\udcc2apigear\n \u2503 \u2503 \u2523 \ud83d\udcc2mqtt\n \u2503 \u2503 \u2503 \u2523 \ud83d\udcdcCMakeLists.txt\n \u2503 \u2503 \u2503 \u2523 \ud83d\udcdcmqttclient.cpp\n \u2503 \u2503 \u2503 \u2523 \ud83d\udcdcmqttclient.h\n \u2503 \u2503 \u2503 \u2523 \ud83d\udcdcmqttservice.cpp\n \u2503 \u2503 \u2503 \u2523 \ud83d\udcdcmqttservice.h\n \u2503 \u2503 \u2503 \u2523 ... (helper files)\n \u2503 \u2503 ... \n \u2503 \u2523 \ud83d\udcc2examples\n \u2503 \u2523 \ud83d\udcc2modules\n \u2503 \u2503   \u2517 \ud83d\udcc2io_world_module\n \u2503 \u2503      \u2517 \ud83d\udcc2io_world\n \u2503 \u2503         \u2523 \ud83d\udcc2generated\n \u2503 \u2503         \u2503  \u2523 \ud83d\udcc2api\n \u2503 \u2503         \u2503  \u2523 \ud83d\udcc2core\n \u2503 \u2503         \u2503  \u2523 \ud83d\udcc2mqtt\n \u2503 \u2503         \u2503  \u2503 \u2523 \ud83d\udcdcCMakeLists.txt\n \u2503 \u2503         \u2503  \u2503 \u2523 \ud83d\udcdchelloclient.cpp\n \u2503 \u2503         \u2503  \u2503 \u2523 \ud83d\udcdchelloclient.h\n \u2503 \u2503         \u2503  \u2503 \u2523 \ud83d\udcdchelloservice.cpp\n \u2503 \u2503         \u2503  \u2503 \u2517 \ud83d\udcdchelloservice.h\n ...\n")),(0,o.kt)("h3",{id:"apiger-mqtt---the-network-layer"},"Apiger MQTT - The Network Layer"),(0,o.kt)("p",null,"When generating the mqtt feature (or any of those: olink monitor feature) you'll get an additional folder it the top most directory: the ",(0,o.kt)("inlineCode",{parentName:"p"},"\ud83d\udcc2hello-world/cpp_hello_world/apigear"),". The ",(0,o.kt)("inlineCode",{parentName:"p"},"\ud83d\udcc2mqtt")," subfolder contains objects that implement a network layer (based on ",(0,o.kt)("a",{parentName:"p",href:"https://eclipse.dev/paho/index.php?page=clients/python/index.php"},"PAHO")," library) for the MQTT protocol. Those are:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Client - Adapts the MQTT client, to serve as an network endpoint for ",(0,o.kt)("a",{parentName:"li",href:"mqtt#mqtt-client-adapter"},"interface client adapters"),".\nExposes:",(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},"methods that allow receiving data from remote service: subscribing for properties changes, signals emission and method response invocation;"),(0,o.kt)("li",{parentName:"ul"},"methods that allow remote using the service: requesting property change or invoking a method. ",(0,o.kt)("br",null),"\nThe client may serve many client interface adapters, even for the same interfaces (allows subscribing for same topic).\nIn case many interface client adapters for same interface are connected: property changes and signals are provided to all the interface client adapters, but the invoke method response will be delivered only for the one that requested it."))),(0,o.kt)("li",{parentName:"ul"},"ServiceAdapter - Adapts the MQTT client to serve as an network endpoint for ",(0,o.kt)("a",{parentName:"li",href:"mqtt#mqtt-server-adapter"},"interface service adapters"),".\nExposes:",(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},"methods that allow receiving requests from remote clients: subscribing for properties change requests, send method invocation;"),(0,o.kt)("li",{parentName:"ul"},"methods that allow publishing property change, signal, functionality to handles sending a response for method invocation requests.",(0,o.kt)("br",null),"\nThis ServiceAdapter may be used for many interface service adapters, but it is not recommended to use more than one interface service adapter for same interface.")))),(0,o.kt)("admonition",{type:"tip"},(0,o.kt)("p",{parentName:"admonition"},"Have in mind that MQTT might not be suitable for high-frequency messages especially with one mqtt client serving more than one object.\nAlso the brokers have limits for messages number/size queued from one client. In case you are not getting all the messages consider changing those or splitting traffic between more clients (maybe some handle the properties, some handle the methods).")),(0,o.kt)("h3",{id:"mqtt-client-adapter"},"MQTT Client Adapter"),(0,o.kt)("p",null,"Files ",(0,o.kt)("inlineCode",{parentName:"p"},"\ud83d\udcdchelloclient.h")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"\ud83d\udcdchelloclient.cpp")," implement the remote client for the ",(0,o.kt)("inlineCode",{parentName:"p"},"Hello")," interface  - a ",(0,o.kt)("inlineCode",{parentName:"p"},"HelloClient")," class.",(0,o.kt)("br",null),"\nThe object is an ",(0,o.kt)("inlineCode",{parentName:"p"},"IHello")," implementation.",(0,o.kt)("br",null),"\nIt requires an instance of Apigear::Mqtt::Client to work.  It uses the Client to subscribe (and unsubscribe) for topics that allow receiving properties, signals and invoke responses from service."),(0,o.kt)("h4",{id:"properties"},"Properties"),(0,o.kt)("p",null,"The property getters (here ",(0,o.kt)("inlineCode",{parentName:"p"},"getLast()")," ) return immediately the locally stored,last received value from service. ",(0,o.kt)("br",null),"\nThe property setter (here ",(0,o.kt)("inlineCode",{parentName:"p"},"void setLast(const Message& last)")," ) requests setting a value on service side, local value is not changed. ",(0,o.kt)("br",null),"\nYou can subscribe to a property changed (here ",(0,o.kt)("inlineCode",{parentName:"p"},"last")," property ) through the publisher you can get from the API with ",(0,o.kt)("inlineCode",{parentName:"p"},"_getPublisher()"),".\nOr you can subscribe for as an IHelloSubscriber and get all changes. See ",(0,o.kt)("a",{parentName:"p",href:"/template-cpp14/features/api#publisher"},"publisher")," and ",(0,o.kt)("a",{parentName:"p",href:"/template-cpp14/features/api#subscriber"},"subscriber")," for more info on subscribing.\nWhen the client receives information that server changed the property, a target property (here ",(0,o.kt)("inlineCode",{parentName:"p"},"last"),") is updated locally and a notifies subscribers that property has changed."),(0,o.kt)("admonition",{type:"note"},(0,o.kt)("p",{parentName:"admonition"},"The connected interface client adapter has its local properties in sync with a service. The messages with property changes are retained in MQTT broker, so all already set properties are provided.")),(0,o.kt)("h4",{id:"operations"},"Operations"),(0,o.kt)("p",null,"The operations have the async version, which is called by the immediate version.",(0,o.kt)("br",null),"\nThe async version sends an invoke operation request to a server.",(0,o.kt)("br",null),"\nSo calling ",(0,o.kt)("inlineCode",{parentName:"p"},"myHelloClientInstance.say(myWhen)")," implements execution of ",(0,o.kt)("inlineCode",{parentName:"p"},"sayAsync")," and waits for the result (for non-void type of operations). Have in mind that this is a blocking operation."),(0,o.kt)("h4",{id:"signals"},"Signals"),(0,o.kt)("p",null,"You should not emit any signals from a client.",(0,o.kt)("br",null),"\nYou can subscribe to any signals offered by your interface (here ",(0,o.kt)("inlineCode",{parentName:"p"},"justSaid)")," signal), through the publisher. You can either select the signal you're interested in, or subscribe as an ",(0,o.kt)("inlineCode",{parentName:"p"},"IHelloSubscriber")," to get all the signals and property change notifications.\nWhen a HelloClient client receives the message from server that indicates the signal was emitted it notifies all the subscribers that requested this notification.."),(0,o.kt)("h4",{id:"use-helloclient"},"Use ",(0,o.kt)("inlineCode",{parentName:"h4"},"HelloClient")),(0,o.kt)("p",null,"HelloClient is an adapter of Mqtt (with protcol and network layer implementation), here provided by a ",(0,o.kt)("inlineCode",{parentName:"p"},"ApiGear::MQTT::Client"),".\nAll you need to do is to pass the ",(0,o.kt)("inlineCode",{parentName:"p"},"ApiGear::MQTT::Client")," to your Interface Client Adapter, and request connecting to host when it is convenient for you."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cpp"},'    // Create a client and make a connection\n    auto mqttclient = std::make_shared<ApiGear::MQTT::Client>("UniqueClientName");\n\n    // set up modules\n    auto ioWorldHello = std::make_unique<IoWorld::MQTT::HelloClient>(mqttclient);\n\n    // start mqtt connection\n    mqttclient.connectToHost("tcp://localhost:1883"); // Use the same port number as your broker is using. Typically, without any other settings it is "1883".\n\n    // use your ioWorldHello as it was Hello implementation\n    ioWorldHello->say(IoWorld::WhenEnum::Soon);\n    auto lastMessage = ioWorldHello->getLast();\n    IoWorld::Message someMessage("the new content");\n    ioWorldHello->setLast(someMessage);\n    testIoWorldHello->_getPublisher().subscribeToJustSaid([](auto args) { /*handle the signal*/});\n')),(0,o.kt)("h3",{id:"mqtt-server-adapter"},"MQTT Server Adapter"),(0,o.kt)("p",null,"Files ",(0,o.kt)("inlineCode",{parentName:"p"},"\ud83d\udcdchelloservice.h")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"\ud83d\udcdchelloservice.cpp")," contain the MQTT service side adapter for the ",(0,o.kt)("inlineCode",{parentName:"p"},"Hello")," interface - the ",(0,o.kt)("inlineCode",{parentName:"p"},"HelloService")," class.",(0,o.kt)("br",null),"\nIt uses the general MQTT service adapter ApiGear::MQTT::Service.\n",(0,o.kt)("inlineCode",{parentName:"p"},"HelloService")," object exposes the local object for remote usage with the MQTT protocol. It handles all the network requests, and calls on your local object.\nThe client connections and communication with them is handled transparently for you, no additional actions are needed."),(0,o.kt)("h4",{id:"properties-1"},"Properties"),(0,o.kt)("p",null,"Each time a property of your the ",(0,o.kt)("inlineCode",{parentName:"p"},"Hello")," interface implementation changes, a message is sent to all connected clients with information, which property changed to which value.\nIt is true for both - local calls on the ",(0,o.kt)("inlineCode",{parentName:"p"},"Hello")," object, by other local ",(0,o.kt)("inlineCode",{parentName:"p"},"Hello")," users or when a change property request message is received by this ",(0,o.kt)("inlineCode",{parentName:"p"},"HelloService")," (the ",(0,o.kt)("inlineCode",{parentName:"p"},"HelloService")," applies the property on your local ",(0,o.kt)("inlineCode",{parentName:"p"},"Hello")," object and then the ",(0,o.kt)("inlineCode",{parentName:"p"},"HelloService")," is triggered)."),(0,o.kt)("h4",{id:"operations-1"},"Operations"),(0,o.kt)("p",null,"The operations invocation which came from the clients through the network will be performed on your local ",(0,o.kt)("inlineCode",{parentName:"p"},"Hello")," object. The result of the operation (if any) will be returned only to a client, from which the message was send, not all clients."),(0,o.kt)("h4",{id:"signals-1"},"Signals"),(0,o.kt)("p",null,"All the signals emitted by your local ",(0,o.kt)("inlineCode",{parentName:"p"},"Hello")," objects are forwarded as an MQTT message to all connected clients."),(0,o.kt)("admonition",{type:"note"},(0,o.kt)("p",{parentName:"admonition"},"Have in mind that the Hello implementation is not thread safe by default.")),(0,o.kt)("h4",{id:"use-helloservice"},"Use ",(0,o.kt)("inlineCode",{parentName:"h4"},"HelloService")),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"HelloService")," is an adapter of Mqtt (with protcol and network layer implementation), here provided by a ",(0,o.kt)("inlineCode",{parentName:"p"},"ApiGear::MQTT::ServiceAdapter"),"\nAll you need to do is to pass the ",(0,o.kt)("inlineCode",{parentName:"p"},"ApiGear::MQTT::ServiceAdapter")," and a local Hello implementation to your HelloService Adapter, then request connecting to host whenever convenient for you."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cpp"},'    auto mqttservice = std::make_shared<ApiGear::MQTT::Service>("ServiceUniqueNameInMqtt");\n    auto ioWorldHello = std::make_shared<IoWorld::Hello>();\n    IoWorld::MQTT::HelloService mqttHelloService(ioWorldHello, mqttservice);\n\n    // start mqtt connection\n    mqttservice->connectToHost("tcp://localhost:1883");\n\n    // use your ioWorldHello as it was Hello implementation, all property changes, and signals will be passed to connected MqttHello clients.\n    ioWorldHello->say(IoWorld::WhenEnum::Soon);\n    IoWorld::Message someMessage("the new content");\n    auto lastMessage = ioWorldHello->getLast();\n    ioWorldHello->setLast(someMessage); // after this call - if new property is different than current one - all clients will be informed about new value.\n    testIoWorldHello->_getPublisher().publishJustSaid(someMessage);\n\n')),(0,o.kt)("h3",{id:"mqtt-messages"},"MQTT Messages"),(0,o.kt)("p",null,"In case you want construct messages for client or server side on your own, please check how topics are created and how does the payload look like, check this documentS ",(0,o.kt)("a",{target:"_blank",href:n(5753).Z},"messages format"),"."))}u.isMDXComponent=!0},5753:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/files/ApiGearMQTTv0.1-2a3f7ef573c506e85e1be8ce33178064.pdf"}}]);