#include <iostream>
{%- for module in system.modules -%}
{% for interface in module.interfaces %}
#include "{{module.name|identifier}}/generated/olink/{{interface.name|lower}}client.h"
#include "{{module.name|identifier}}/generated/monitor/{{interface.name|lower}}.tracedecorator.h"
{% endfor %}
{% endfor %}

#include "apigear/olink/olinkconnection.h"
#include "apigear/tracer/tracer.h"
#include "olink/consolelogger.h"
#include "olink/clientregistry.h"

using namespace {{ system.name | capital }};

int main(){
    ApiGear::PocoImpl::Tracer tracer;
    tracer.connect("http://localhost:5555", "testExampleOLinkApp");
    ApiGear::ObjectLink::ClientRegistry registry;
    ApiGear::ObjectLink::ConsoleLogger logger;
    registry.onLog(logger.logFunc());
    ApiGear::PocoImpl::OlinkConnection clientManager(registry);
    clientManager.node()->onLog(logger.logFunc());
    {% for module in system.modules %}
    {% for interface in module.interfaces %}
    {% assign class = interface.name | capital %}
    {% assign clientClassName = module.name | capital | lowerFirst | append: class %}
    {% assign tracer_class = class | append: "TraceDecorator" %}
    {% assign tracer_className = module.name | capital | lowerFirst | append: class | append: "Traced" %}
    auto {{clientClassName}} = std::make_shared<{{ module.name | capital }}::olink::{{interface.name}}Client>();
    clientManager.connectAndLinkObject({{clientClassName}});
    std::unique_ptr<{{ module.name | capital }}::I{{class}}> {{tracer_className}} = {{ module.name | capital }}::{{tracer_class}}::connect(*{{clientClassName}}, tracer);
    {% endfor %}
    {% endfor %}
    
    clientManager.connectToHost(Poco::URI("ws://localhost:8000"));

    bool keepRunning = true;
    std::string cmd;
    do {
        std::cout << "Enter command:" << std::endl;
        getline (std::cin, cmd);

        if(cmd == "quit"){
            keepRunning = false;
            clientManager.disconnect();
        }
    } while(keepRunning);
    {% for module in system.modules %}
    {% for interface in module.interfaces %}
    {% assign class = interface.name | capital %}
    {% assign clientClassName = module.name | capital | lowerFirst | append: class %}
    clientManager.disconnectAndUnlink({{clientClassName}}->olinkObjectName());
    {% endfor %}
    {% endfor %}

    return 0;
}
