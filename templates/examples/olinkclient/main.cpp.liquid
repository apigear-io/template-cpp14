#include <iostream>
{%- for module in system.modules -%}
{% for interface in module.interfaces %}
#include "{{module.name|identifier}}/generated/olink/remote{{interface.name|lower}}.h"
#include "{{module.name|identifier}}/generated/monitor/{{interface.name|lower}}.tracedecorator.h"
{% endfor %}
{% endfor %}
#include "apigear/olink/olinkclient.h"
#include "apigear/tracer/tracer.h"

using namespace {{ system.name | capital }};

int main(){
    ApiGear::PocoImpl::Tracer tracer;
    tracer.connect("http://localhost:5555", "testExampleOLinkApp");
    ApiGear::ObjectLink::ClientRegistry registry;
    ApiGear::PocoImpl::OLinkClient testClient(registry);
    {% for module in system.modules %}
    {% for interface in module.interfaces %}
    {% assign class = interface.name | capital %}
    {% assign tracer_class = class | append: "TraceDecorator" %}
    std::unique_ptr<{{ module.name | capital }}::I{{class}}> test{{module.name | capital}}{{class}} = std::make_unique<{{ module.name | capital }}::olink::Remote{{interface.name}}>(registry, testClient);
    std::unique_ptr<{{ module.name | capital }}::I{{class}}> test{{ module.name | capital }}{{tracer_class}} = {{ module.name | capital }}::{{tracer_class}}::connect(*test{{module.name | capital}}{{class}}, tracer);
    {% endfor %}
    {% endfor %}
    
    testClient.connectToHost(Poco::URI("ws://localhost:8000"));

    bool keepRunning = true;
    std::string cmd;
    do {
        std::cout << "Enter command:" << std::endl;
        getline (std::cin, cmd);

        if(cmd == "quit"){
            keepRunning = false;
            testClient.disconnect();
        }
    } while(keepRunning);

    return 0;
}
