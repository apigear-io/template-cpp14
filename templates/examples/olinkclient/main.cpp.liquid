#include <iostream>
{%- for module in system.modules -%}
{% for interface in module.interfaces %}
#include "{{module.name|identifier}}/generated/olink/remote{{interface.name|lower}}.h"
#include "{{module.name|identifier}}/generated/monitor/{{interface.name|lower}}.tracedecorator.h"
{% endfor %}
{% endfor %}
#include "apigear/olink/olinkclient.h"
#include "apigear/tracer/tracer.h"

using namespace {{ system.name | capital }};

int main(){
    ApiGear::PocoImpl::Tracer tracer;
    tracer.connect("http://localhost:5555", "testExampleOLinkApp");
    ApiGear::ObjectLink::ClientRegistry registry;
    ApiGear::PocoImpl::OLinkClient testClient(registry);
    {% for module in system.modules %}
    {% for interface in module.interfaces %}
    {% assign class = interface.name | capital %}
    {% assign tracer_class = class | append: "TraceDecorator" %}
    {% assign remote_class = interface.name | prepend: "Remote" %}
    {% assign module_name_first_capital = module.name | slice: 0 | capital %}
    {% assign module_name_rest = module.name | capital | remove_first: module_name_first_capital %}
    {% assign module_name_first_lower = module_name_first_capital | downcase %}
    {% assign module_name = module_name_first_lower | append: module_name_rest %}
    {% assign class_instance_name = interface.name | capital | prepend: module_name  %}
    {% assign remote_instance_name = interface.name | prepend: module_name | capital | prepend: "remote" %}
    {% assign tracer_name = class_instance_name | append: "Traced" %}
    {{nl}}
    auto {{remote_instance_name}} = std::make_unique<{{ module.name | capital }}::{{remote_class}}>(registry, testClient);
    auto {{tracer_name}} = {{ module.name | capital }}::{{tracer_class}}::connect(*{{remote_instance_name}}, tracer);
    {% comment %} TODO add clients - ISubscriber class or just for 1 -2 methods {% endcomment %}
    {% endfor %}
    {% endfor %}
    
    testClient.connectToHost(Poco::URI("ws://localhost:8000"));

    bool keepRunning = true;
    std::string cmd;
    do {
        std::cout << "Enter command:" << std::endl;
        getline (std::cin, cmd);

        if(cmd == "quit"){
            keepRunning = false;
            testClient.disconnect();
        }
    } while(keepRunning);

    return 0;
}
