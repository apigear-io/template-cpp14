{%- for module in system.modules -%}
{% for interface in module.interfaces %}
#include "{{module.name|identifier}}/implementation/{{interface.name|lower }}.h"
#include "{{module.name|identifier}}/generated/monitor/{{interface.name|lower}}.tracedecorator.h"
{% endfor %}
{% endfor %}
#include "apigear/tracer/tracer.h"

using namespace {{ system.name | capital }};

int main(){
    ApiGear::PocoImpl::Tracer tracer;
    tracer.connect("http://localhost:5555", "testExampleApp");
    {% for module in system.modules %}
    {% for interface in module.interfaces %}
    {% assign class = interface.name | capital %}
    {% assign tracer_class = class | append: "TraceDecorator" %}
    {% assign module_name_first_capital = module.name | slice: 0 | capital %}
    {% assign module_name_rest = module.name | capital | remove_first: module_name_first_capital %}
    {% assign module_name_first_lower = module_name_first_capital | downcase %}
    {% assign module_name = module_name_first_lower | append: module_name_rest %}
    {% assign class_instance_name = interface.name | capital | prepend: module_name  %}
    {% assign tracer_name = class_instance_name | append: "Traced" %}
    {{nl}}
    auto {{class_instance_name}} = std::make_unique<{{ module.name | capital }}::{{class}}>();
    auto {{ tracer_name }} = {{ module.name | capital }}::{{tracer_class}}::connect(*{{class_instance_name}} , tracer);
    {% endfor %}
    {% endfor %}

    return 0;
}
