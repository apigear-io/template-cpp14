#include <iostream>
{%- for module in system.modules -%}
{% for interface in module.interfaces %}
#include "{{module.name|identifier}}/implementation/{{interface.name|lower}}.h"
#include "{{module.name|identifier}}/generated/olink/{{interface.name|lower}}service.h"
{% endfor %}
{% endfor %}
#include "apigear/olink/olinkhost.h"

using namespace {{ system.name | capital }};

int main(){
    ApiGear::ObjectLink::RemoteRegistry registry;
    ApiGear::PocoImpl::OLinkHost testserver(registry);

    {% for module in system.modules %}
    {% for interface in module.interfaces %}
    {% assign class = interface.name | capital %}
    {% assign service_class = interface.name | append: "Service" %}
    {% assign module_name_first_capital = module.name | slice: 0 | capital %}
    {% assign module_name_rest = module.name | capital | remove_first: module_name_first_capital %}
    {% assign module_name_first_lower = module_name_first_capital | downcase %}
    {% assign module_name = module_name_first_lower | append: module_name_rest %}
    {% assign class_instance_name = interface.name | capital | prepend: module_name  %}
    {% assign service_name = class_instance_name | append: "Service" %}
    {{nl}}
    auto {{class_instance_name}} = std::make_unique<{{ module.name | capital }}::{{class}}>();
    {{ module.name | capital }}::{{service_class}} {{service_name}}(*{{class_instance_name}}, registry);
    {% endfor %}
    {% endfor %}

    testserver.listen(8000);

    bool keepRunning = true;
    std::string cmd;
    do {
        std::cout << "Enter command:" << std::endl;
        getline (std::cin, cmd);

        if(cmd == "quit"){
            testserver.close();
            keepRunning = false;
        }
    } while(keepRunning);

    return 0;
}
