{%- for module in system.modules -%}
{% for interface in module.interfaces %}
#include "{{module.name|identifier}}/implementation/{{interface.name|lower}}.h"
#include "{{module.name|identifier}}/generated/olink/{{interface.name|lower}}service.h"
{% endfor %}
{% endfor %}

#include "olink/consolelogger.h"
#include "olink/remoteregistry.h"
#include "apigear/olink/olinkhost.h"

#include <iostream>

using namespace {{ system.name | capital }};

int main(){
    ApiGear::ObjectLink::RemoteRegistry registry;
    ApiGear::ObjectLink::ConsoleLogger logger;
    registry.onLog(logger.logFunc());
    
    ApiGear::PocoImpl::OLinkHost testserver(registry);

    {% for module in system.modules %}
    {% for interface in module.interfaces %}
    {% assign class = interface.name | capital %}
    {% assign instanceName = module.name|capital|lowerFirst | append: class %}
    {% assign serviceInstanceName = module.name|capital|lowerFirst | append: "Olink" | append: class | append: "Service" %}
    auto {{instanceName}} = std::make_shared<{{ module.name | capital }}::{{class}}>();
    auto {{serviceInstanceName}} = std::make_shared<{{ module.name | capital }}::olink::{{interface.name}}Service>({{instanceName}}, registry);
    registry.addSource({{serviceInstanceName}});
    {% endfor %}
    {% endfor %}

    testserver.listen(8000);

    bool keepRunning = true;
    std::string cmd;
    do {
        std::cout << "Enter command:" << std::endl;
        getline (std::cin, cmd);

        if(cmd == "quit"){
            testserver.close();
            keepRunning = false;
        }
    } while(keepRunning);

    {% for module in system.modules %}
    {% for interface in module.interfaces %}
    {% assign class = interface.name | capital %}
    {% assign serviceInstanceName = module.name|capital|lowerFirst | append: "Olink" | append: class | append: "Service" %}
    registry.removeSource({{serviceInstanceName}}->olinkObjectName());
    {% endfor %}
    {% endfor %}
    
    return 0;
}
