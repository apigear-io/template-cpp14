{% assign module_id = module.name|identifier %}
{% assign module_path = module.name|path -%}
set(CMAKE_POSITION_INDEPENDENT_CODE ON)

set(CMAKE_CXX_STANDARD 14)
set(CMAKE_CXX_STANDARD_REQUIRED ON)

set (SOURCES_CORE_IMPL
{% for interface in module.interfaces %}
    {{module.name|identifier}}_{{interface.name|lower}}.cpp
{% endfor %}
)
add_library({{module_id}}-implementation STATIC ${SOURCES_CORE_IMPL})
add_library({{module_id}}::implementation ALIAS {{module_id}}-implementation)
target_include_directories({{module_id}}-implementation PUBLIC ${CMAKE_CURRENT_SOURCE_DIR} ${CMAKE_CURRENT_SOURCE_DIR}/../)
target_link_libraries({{module_id}}-implementation PUBLIC {{module_id}}::api {{module_id}}::core)
# ensure maximum compiler support
if(NOT MSVC)
  target_compile_options({{module_id}}-implementation PRIVATE -Wall -Wextra -Wpedantic -Werror -fvisibility=hidden)
else()
  target_compile_options({{module_id}}-implementation PRIVATE /W4 /WX /wd4251)
endif()

# add test cases
if(BUILD_TESTING)
find_package(Catch2 REQUIRED)
set(CMAKE_CTEST_COMMAND ctest -V)

if(NOT TARGET check)
add_custom_target(check COMMAND ${CMAKE_CTEST_COMMAND})
endif()

set (SOURCES_TEST
    ${CMAKE_CURRENT_SOURCE_DIR}/../generated/core/{{module_id}}.test.cpp
{% for interface in module.interfaces %}
    {{interface.name|lower}}.test.cpp
{% endfor %}
)
add_executable(test_{{module_id}} EXCLUDE_FROM_ALL
    ${SOURCES_TEST}
)
target_link_libraries(test_{{module_id}} {{module_id}}::implementation Catch2::Catch2)
target_include_directories(test_{{module_id}} PRIVATE ${CMAKE_CURRENT_SOURCE_DIR})

add_test(test_{{module_id}} test_{{module_id}})
add_dependencies(check test_{{module_id}})
endif(BUILD_TESTING)