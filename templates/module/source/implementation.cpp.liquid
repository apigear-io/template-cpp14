{% comment %} // Copyright (c) ApiGear UG 2020 {% endcomment -%}
{{ module | licGPLcpp }}
{% assign class = interface.name | capital -%}
{% assign sub_class = "I" | append: interface.name | capital | append: "Subscriber" %}
{% assign pub_class = interface.name | capital | append: "Publisher" %}
{% assign pub_interface = "I" | append: interface.name | capital | append: "Publisher"%}

#include "{{module.name|identifier}}/implementation/{{class|lower}}.h"
#include "{{module.name|identifier}}/generated/core/{{interface.name|lower}}.publisher.h"

using namespace {{ system.name | capital }}::{{ module.name | capital }};

struct {{class}}::{{class}}Data
{
    {{class}}Data()
    : _publisher(std::make_unique<{{pub_class}}>())
    {% for property in interface.properties %}
    {{nl}}, m_{{property.name}}({{property|cpp14Default}})
    {% endfor %}
    {
    }
    std::unique_ptr<{{pub_interface}}> _publisher;
{% for property in interface.properties %}
    {{property|cpp14Return}} m_{{property.name}};
{% endfor %}

    ~{{class}}Data() = default;
};

{% if interface.description != "" %}
/**
   \brief {{interface.description}}
*/
{% endif %}
{{class}}::{{class}}()
    : d_ptr(std::make_unique<{{class}}::{{interface.name | capital}}Data>())
{
}
{{class}}::~{{class}}()
{
}
{% for property in interface.properties %}
{% if property.description != undefined %}
/**
   \brief property {{property.description}}
*/
{% endif %}
void {{class}}::set{{property.name|capitalize}}({{ property|cpp14Param }})
{
    if (d_ptr->m_{{property.name}} != {{property.name}}) {
        d_ptr->m_{{property.name}} = {{property.name}};
        d_ptr->_publisher->publish{{property.name|capital}}Changed({{property.name}});
    }
}

{{property|cpp14Return: true}} {{class}}::{{property.name}}() const
{
    return d_ptr->m_{{property.name}};
}
{% endfor %}

{% for operation in interface.operations %}


{% if operation.description != "" %}
/**
   \brief {{operation.description}}
*/
{% endif %}
{{operation|cpp14Return}} {{class}}::{{operation.name}}({{operation|cpp14Params}})
{
    {% for parameter in operation.params %}
    (void) {{parameter.name}};
    {% endfor %}
    // do business logic here
    return {{operation|cpp14Default}};
}

{% capture returnType %}{{operation|cpp14Return}}{% endcapture %}

std::future<{{returnType}}> {{class}}::{{operation.name}}Async({{operation|cpp14Params}})
{
    return std::async(std::launch::async, [this{%- for param in operation.params -%},
                    {{param}}
                {%- endfor -%}]()
        {
            return {{operation.name}}({%- for param in operation.params -%}
                    {{param}}{% unless forloop.last %},{% endunless %}
                {%- endfor -%});
        }
    );
}
{% endfor %}

{{pub_interface}}& {{class}}::_getPublisher() const
{
    return *(d_ptr->_publisher.get());
}
