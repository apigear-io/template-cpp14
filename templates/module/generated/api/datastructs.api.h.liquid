{% capture nl %}
{% endcapture -%}
{% comment %} // Copyright (c) ApiGear UG 2020 {% endcomment -%}
{{ module | licGPLcpp -}}

#pragma once

#include <cinttypes>
#include <string>
#include <list>

#include "{{module.name|identifier}}/generated/api/common.h"

namespace {{ system.name | capital }} {
namespace {{ module.name | capital }} {
  
{% for struct in module.structs %}
struct {{struct.name}};
{% endfor %}

{% for enum in module.enums %}
{% assign class = enum.name %}

{% comment %} 
*****************************************************************
*** ENUMERATIONS                                              ***
*****************************************************************
{% endcomment %}

/**
 * Enumeration {{class}}
 {% unless enum.description == blank %}
 *
 * {{enum.description}}
 {% endunless %}
 */
enum class {{class}}Enum {
{% for member in enum.members %}
    {{member.name}} = {{member.value}}{% unless forloop.last %},{% endunless %}
    {% unless member.description == blank %} /**< {{member.description}} */{% endunless %}
{% endfor %}
};
{{ system.name | constant }}_{{ module.name | constant }}_EXPORT {{class}}Enum to{{class|capitalize}}Enum(std::uint8_t v, bool *ok);
{% endfor %}
{% for struct in module.structs %}
{% assign class = struct.name %}

{% comment %} 
*****************************************************************
*** STRUCTS                                                   ***
*****************************************************************
{% endcomment %}

/**
 * Struct {{class}}
 {% unless struct.description == blank %}
 *
 * {{struct.description}}
 {% endunless %}
 */
struct {{ system.name | constant }}_{{ module.name | constant }}_EXPORT {{class}}
{
    {{class}}();
    {{class}}(
    {%- for field in struct.fields -%}
    {{ field | cpp14Param }}{% unless forloop.last %},{% endunless %}
    {% endfor -%}
    );
{{nl}}
{% for field in struct.fields %}
    {% unless field.description == blank %}
    /**
    * {{field.description}}
    */
    {% endunless %}
    {{ field|cpp14Return }} {{field.name}}{};
{% endfor %}

};
bool {{ system.name | constant }}_{{ module.name | constant }}_EXPORT operator==(const {{class}} &, const {{class}} &) noexcept;
bool {{ system.name | constant }}_{{ module.name | constant }}_EXPORT operator!=(const {{class}} &, const {{class}} &) noexcept;
{% endfor %}
} // namespace {{ module.name | capital }}
} // namespace {{ system.name | capital }}
