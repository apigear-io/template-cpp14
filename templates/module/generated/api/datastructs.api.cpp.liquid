{% comment %} // Copyright (c) ApiGear UG 2020 {% endcomment -%}
#include "{{module.name|identifier}}/generated/api/datastructs.api.h"

namespace {{ system.name | capital }} {
namespace {{ module.name | capital }} {

{% for enum in module.enums %}
{% assign class = enum.name %}

// ********************************************************************
// Enumeration {{class}}
// ********************************************************************
{{class}}Enum to{{class|capitalize}}Enum(std::uint8_t v, bool *ok)
{
    if (ok != nullptr) {
        *ok = true;
    }
    switch (v) {
{% for member in enum.members %}
        case {{member.value}}: return {{class}}Enum::{{member.name}};
{% endfor %}
        default:
            if (ok != nullptr) {
                *ok = false;
            }
            return {{enum|cpp14Default}};
    }
}
{% endfor %}

{% for struct in module.structs %}
{% assign class = struct.name %}
// ********************************************************************
// Struct {{class}}
// ********************************************************************
{{class}}::{{class}}() = default;
{{class}}::{{class}}(
    {% for field in struct.fields %}
    {{ field | cpp14Param }}{% unless forloop.last %},{% endunless %}
    {% endfor -%}
    )
{%- for field in struct.fields %}
{% if forloop.first -%}
    :{% else %},{% endif %}
    {{field.name}}({{field.name}})
{% endfor %}
{
}

bool operator==(const {{class}}& lhs, const {{class}}& rhs) noexcept
{
    return (
{% for field in struct.fields %}
        lhs.{{field.name}} == rhs.{{field.name}}{% unless forloop.last %} &&
{% endunless %}
{% endfor %}

    );
}

bool operator!=(const {{class}}& lhs, const {{class}}& rhs) noexcept
{
    return !(lhs == rhs);
}

{% endfor %}
} // namespace {{ module.name | capital }}
} // namespace {{ system.name | capital }}
