{% comment %} // Copyright (c) ApiGear UG 2020 {% endcomment -%}
{{ module | licGPLcpp -}}

#include "{{module.name|identifier}}/generated/core/{{interface.name|lower}}.publisher.h"
#include <algorithm>

{% assign sub_class = "I" | append: interface.name | capital | append: "Subscriber" %}
{% assign pub_class = interface.name | capital | append: "Publisher"%}
{% assign pub_impl_class = interface.name | capital | append: "PublisherImpl" %}
{{nl}}

namespace {{ system.name | capital }} {
namespace {{ module.name | capital }} {

/**
 * The implementation of a {{pub_class}}.
 * Use this class to store clients of the {{interface.name}} and inform them about the change
 * on call of the appropriate publish function.
 */
class {{pub_impl_class}} : public {{pub_interface}}
{
public:
    /**
    * Implementation of {{pub_interface}}::subscribeToAllChanges
    */
    void subscribeToAllChanges({{sub_class}}& subscriber) override;
    /**
    * Implementation of {{pub_interface}}::unsubscribeFromAllChanges
    */
    void unsubscribeFromAllChanges({{sub_class}}& subscriber) override;
{{nl}}
{% for property in interface.properties %}
    /**
    * Implementation of {{pub_interface}}::subscribeTo{{property.name|capital}}Changed
    */
    long subscribeTo{{property.name|capital}}Changed({{interface.name | capital}}{{property.name | capital}}PropertyCb callback) override;
    /**
    * Implementation of {{pub_interface}}::subscribeTo{{property.name|capital}}Changed
    */
    void unsubscribeFrom{{property.name | capital}}Changed(long handleId) override;
{{nl}}
{% endfor %}
{% for signal in interface.signals %}
    /**
    * Implementation of {{pub_interface}}::subscribeTo{{signal.name | capital}}
    */
    long subscribeTo{{signal.name | capital}}({{interface.name | capital}}{{signal.name | capital}}SignalCb callback) override;
    /**
    * Implementation of {{pub_interface}}::unsubscribeFrom{{signal.name | capital}}
    */
    void unsubscribeFrom{{signal.name | capital}}(long handleId) override;
{{nl}}
{% endfor %}
{% for property in interface.properties %}
    /**
    * Implementation of {{pub_interface}}::publish{{property.name|capital}}Changed
    */
    void publish{{property.name|capital}}Changed({{property|cpp14Param: true}}) const override;
{% endfor %}
{% for signal in interface.signals %}
    /**
    * Implementation of {{pub_interface}}::publish{{signal.name|capital}}
    */
    void publish{{signal.name|capital}}(
        {%- for param in signal.params -%}
            {{param|cpp14Param: true}}{% unless forloop.last %},{% endunless -%}
        {%- endfor -%}
    ) const override;
{% endfor %}
private:
    // Subscribers informed about any property change or singal emited in {{interface.name}}
    std::set<{{sub_class}}*> AllChangesSubscribers;
{% for property in interface.properties %}
    // Next free unique identifier to subscribe for the {{property.name | capital}} change.
    long {{property.name | capital}}ChangedCallbackNextId = 0;
    // Subscribed callbacks for the {{property.name | capital}} change.
    std::map<long, {{interface.name | capital}}{{property.name | capital}}PropertyCb> {{property.name|capital}}Callbacks;
{% endfor %}
{% for signal in interface.signals %}
    // Next free unique identifier to subscribe for the {{signal.name | capital}} emission.
    long {{signal.name | capital}}SignalCallbackNextId = 0;
    // Subscribed callbacks for the {{signal.name | capital}} emission.
    std::map<long, {{interface.name | capital}}{{signal.name | capital}}SignalCb> {{signal.name|capital}}Callbacks;
{% endfor %}
};
>>>>>>> 6b08db3 (fixes after self review, description fixes, small alignement of code)
{{nl}}

using namespace {{ system.name | capital }}::{{ module.name | capital }};

void {{pub_class}}::subscribeToAllChanges({{sub_class}}& subscriber)
{
    auto found = std::find_if(m_allChangesSubscribers.begin(), m_allChangesSubscribers.end(),
                        [&subscriber](const auto element){return &(element.get()) == &subscriber;});
    if (found == m_allChangesSubscribers.end())
    {
        m_allChangesSubscribers.push_back(std::reference_wrapper<{{sub_class}}>(subscriber));
    }
}
{{nl}}
void {{pub_class}}::unsubscribeFromAllChanges({{sub_class}}& subscriber)
{
    auto found = std::find_if(m_allChangesSubscribers.begin(), m_allChangesSubscribers.end(),
                        [&subscriber](const auto element){return &(element.get()) == &subscriber;});
    if (found != m_allChangesSubscribers.end())
    {
        m_allChangesSubscribers.erase(found);
    }
}
{{nl}}
{% for property in interface.properties %}
long {{pub_class}}::subscribeTo{{property.name|capital}}Changed({{interface.name | capital}}{{property.name | capital}}PropertyCb callback)
{
    auto handleId = m_{{property.name | capital| lowerFirst}}ChangedCallbackNextId++;
    m_{{property.name|capital| lowerFirst}}Callbacks[handleId] = callback;
    return handleId;
}
{{nl}}
void {{pub_class}}::unsubscribeFrom{{property.name | capital}}Changed(long handleId)
{
    m_{{property.name|capital| lowerFirst}}Callbacks.erase(handleId);
}
{{nl}}
void {{pub_class}}::publish{{property.name|capital}}Changed({{property|cpp14Param: true}}) const
{
    for(const auto& subscriber: m_allChangesSubscribers)
    {
        subscriber.get().on{{property.name|capital}}Changed({{property.name}});
    }
    for(const auto& callbackEntry: m_{{property.name|capital| lowerFirst}}Callbacks)
    {
        {% comment %} TODO clean up subscriber if subscriber is not valid anymore {% endcomment %}
        if(callbackEntry.second)
        {
            callbackEntry.second({{property.name}});
        }
    }
}
{{nl}}
{% endfor %}

{% for signal in interface.signals %}
long {{pub_class}}::subscribeTo{{signal.name | capital}}({{interface.name | capital}}{{signal.name | capital}}SignalCb callback)
{
    // this is a short term workaround - we need a better solution for unique handle identifiers
    auto handleId = m_{{signal.name | capital| lowerFirst}}SignalCallbackNextId++;
    m_{{signal.name | capital| lowerFirst}}Callbacks[handleId] = callback;
    return handleId;
}
{{nl}}
void {{pub_class}}::unsubscribeFrom{{signal.name | capital}}(long handleId)
{
    m_{{signal.name | capital| lowerFirst}}Callbacks.erase(handleId);
}
{{nl}}
void {{pub_class}}::publish{{signal.name|capital}}(
    {%- for param in signal.params -%}
        {{param|cpp14Param: true}}{% unless forloop.last %},{% endunless -%}
    {%- endfor -%}
) const
{
    for(const auto& subscriber: m_allChangesSubscribers)
    {
        subscriber.get().on{{signal.name | capital}}(
        {%- for param in signal.params -%}
            {{param.name}}{% unless forloop.last %},{% endunless -%}
        {%- endfor -%}
        );
    }
    for(const auto& callbackEntry: m_{{signal.name|capital| lowerFirst}}Callbacks)
    {
        {% comment %} TODO clean up subscriber if subscriber is not valid anymore {% endcomment %}
        if(callbackEntry.second)
        {
            callbackEntry.second(
            {%- for param in signal.params -%}
                {{param.name}}{% unless forloop.last %},{% endunless -%}
            {%- endfor -%}
            );
        }
    }
}
{{nl}}
{% endfor %}
