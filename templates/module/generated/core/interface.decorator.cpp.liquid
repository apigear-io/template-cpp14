{% comment %} // Copyright (c) ApiGear UG 2020 {% endcomment -%}
{{ module | licGPLcpp }}
{% assign class = "Abstract" | append: interface.name | capital | append: "Decorator" -%}
{% assign interface_class = "I" | append: interface.name | capital %}
{% assign sub_class = "I" | append: interface.name | capital | append: "Subscriber" %}
{% assign pub_class = interface.name | capital | append: "Publisher"%}
{% assign pub_interface = "I" | append: interface.name | capital | append: "Publisher"%}

#include "{{module.name|identifier}}/generated/core/{{interface.name|lower}}.decorator.h"
#include "{{module.name|identifier}}/generated/core/{{interface.name|lower}}.publisher.h"

using namespace {{ system.name | capital }}::{{ module.name | capital }};

{% if interface.description != "" %}
/**
   \brief {{interface.description}}
*/
{% endif %}
{{class}}::{{class}}({{interface_class}}* impl)
    : m_impl(impl)
{
    m_impl->_getPublisher().subscribeToAllChanges(*this);
}
{{interface_class}}* {{class}}::swapUnderlyingImplementation({{interface_class}}* impl)
{
    {{interface_class}}* retVal = m_impl;
    if (m_impl != nullptr) {
        m_impl->_getPublisher().unsubscribeFromAllChanges(*this);
    }
    m_impl = impl;
    if (m_impl != nullptr) {
        m_impl->_getPublisher().subscribeToAllChanges(*this);
    }
    return retVal;
}
{{interface_class}}* {{class}}::disconnectFromUnderlyingImplementation()
{
    {{interface_class}}* retVal = m_impl;
    if (m_impl != nullptr) {
        m_impl->_getPublisher().unsubscribeFromAllChanges(*this);
        m_impl = nullptr;
    }
    return retVal;
}
{{class}}::~{{class}}()
{
    if (m_impl != nullptr)
    {
        m_impl->_getPublisher().unsubscribeFromAllChanges(*this);
    }
}
{% for property in interface.properties %}
{% if property.description != undefined %}
/**
   \brief property {{property.description}}
*/
{% endif %}
void {{class}}::set{{property.name|capitalize}}({{ property|cpp14Param }})
{
    m_impl->set{{property.name|capitalize}}({{property.name}});
}

{{property|cpp14Return: true}} {{class}}::{{property.name}}() const
{
    return m_impl->{{property.name}}();
}
{% endfor %}

{% for operation in interface.operations %}


{% if operation.description != "" %}
/**
   \brief {{operation.description}}
*/
{% endif %}
{{operation|cpp14Return}} {{class}}::{{operation.name}}({{operation|cpp14Params}})
{
    return m_impl->{{operation.name}}({% for param in operation.params %}{{param.name}}{% unless forloop.last %},{% endunless %}{% endfor %});
}

{% capture returnType %}{{operation|cpp14Return}}{% endcapture %}
std::future<{{returnType}}> {{class}}::{{operation.name}}Async({{operation|cpp14Params}})
{
    return m_impl->{{operation.name}}Async({% for param in operation.params %}{{param.name}}{% unless forloop.last %},{% endunless %}{% endfor %});
}

{% endfor %}

{{pub_interface}}& {{class}}::_getPublisher() const
{
    return m_impl->_getPublisher();
}
