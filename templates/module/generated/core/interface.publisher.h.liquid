{% comment %} // Copyright (c) ApiGear UG 2020 {% endcomment -%}
{{ module | licGPLcpp -}}
#pragma once

#include <memory>
#include "{{module.name|identifier}}/generated/api/datastructs.api.h"
#include "{{module.name|identifier}}/generated/api/{{interface.name|lower}}.api.h"
#include "{{module.name|identifier}}/generated/api/common.h"

{% assign class = "I" | append: interface.name | capital %}

namespace {{ system.name | capital }} {
namespace {{ module.name | capital }} {

{% assign sub_class = class | append: "Subscriber" %}
{% assign pub_interface =  class | append: "Publisher" %}
{% assign pub_class = interface.name | capital | append: "Publisher"%}
/**
 * Implementation {{pub_class}}
 */
class {{ system.name | constant }}_{{ module.name | constant }}_EXPORT {{pub_class}}: public {{pub_interface}}
{
public:
    explicit {{pub_class}}();
    virtual ~{{pub_class}}();

    // {{pub_class}} is not copyable
    {{pub_class}}(const {{pub_class}}& a) = delete;
    {{pub_class}}& operator=(const {{pub_class}}& a) = delete;
    // {{pub_class}} is not movable
    {{pub_class}}({{pub_class}}&& a) = delete;
    {{pub_class}}& operator=({{pub_class}}&& a) = delete;

    void subscribeTo{{interface.name | capital}}Interface({{sub_class}}& subscriber) override;
    void unsubscribeFrom{{interface.name | capital}}Interface({{sub_class}}& subscriber) override;
{{nl}}
{% for property in interface.properties %}
    long subscribeTo{{property.name|capital}}Changed({{interface.name | capital}}{{property.name | capital}}PropertyCb callback) override;
    void unsubscribeFrom{{property.name | capital}}Changed(long handleId) override;
{{nl}}
{% endfor %}
{% for signal in interface.signals %}
    long subscribeTo{{signal.name | capital}}({{interface.name | capital}}{{signal.name | capital}}SignalCb callback) override;
    void unsubscribeFrom{{signal.name | capital}}(long handleId) override;
{{nl}}
{% endfor %}
{% for signal in interface.signals %}
    void publish{{signal.name|capital}}(
        {%- for param in signal.params -%}
            {{param|cpp14Param: true}}{% unless forloop.last %},{% endunless -%}
        {%- endfor -%}
    ) const override;
{% endfor %}
protected:
{% for property in interface.properties %}
    void publish{{property.name|capital}}Changed({{property|cpp14Param: true}}) const override;
{% endfor %}
private:
    std::shared_ptr<{{pub_interface}}> m_impl;
};

} // namespace {{ module.name | capital }}
} // namespace {{ system.name | capital }}
