{% comment %} // Copyright (c) ApiGear UG 2020 {% endcomment -%}
{{ module | licGPLcpp -}}
#pragma once

#include "{{module.name|identifier}}/generated/api/datastructs.api.h"
#include "{{module.name|identifier}}/generated/api/{{interface.name|lower}}.api.h"
#include "{{module.name|identifier}}/generated/api/common.h"

#include <vector>
#include <map>
#include <functional>


{% assign class = "I" | append: interface.name | capital %}

namespace {{ system.name | capital }} {
namespace {{ module.name | capital }} {

{% assign sub_class = class | append: "Subscriber" %}
{% assign pub_interface =  class | append: "Publisher" %}
{% assign pub_class = interface.name | capital | append: "Publisher"%}

/**
 * The implementation of a {{pub_class}}.
 * Use this class to store clients of the {{interface.name}} and inform them about the change
 * on call of the appropriate publish function.
 */
class {{ system.name | constant }}_{{ module.name | constant }}_EXPORT {{pub_class}} : public {{pub_interface}}
{
public:
    /**
    * Implementation of {{pub_interface}}::subscribeToAllChanges
    */
    void subscribeToAllChanges({{sub_class}}& subscriber) override;
    /**
    * Implementation of {{pub_interface}}::unsubscribeFromAllChanges
    */
    void unsubscribeFromAllChanges({{sub_class}}& subscriber) override;
{{nl}}
{% for property in interface.properties %}
    /**
    * Implementation of {{pub_interface}}::subscribeTo{{property.name|capital}}Changed
    */
    long subscribeTo{{property.name|capital}}Changed({{interface.name | capital}}{{property.name | capital}}PropertyCb callback) override;
    /**
    * Implementation of {{pub_interface}}::subscribeTo{{property.name|capital}}Changed
    */
    void unsubscribeFrom{{property.name | capital}}Changed(long handleId) override;
{{nl}}
{% endfor %}
{% for signal in interface.signals %}
    /**
    * Implementation of {{pub_interface}}::subscribeTo{{signal.name | capital}}
    */
    long subscribeTo{{signal.name | capital}}({{interface.name | capital}}{{signal.name | capital}}SignalCb callback) override;
    /**
    * Implementation of {{pub_interface}}::unsubscribeFrom{{signal.name | capital}}
    */
    void unsubscribeFrom{{signal.name | capital}}(long handleId) override;
{{nl}}
{% endfor %}
{% for property in interface.properties %}
    /**
    * Implementation of {{pub_interface}}::publish{{property.name|capital}}Changed
    */
    void publish{{property.name|capital}}Changed({{property|cpp14Param: true}}) const override;
{% endfor %}
{% for signal in interface.signals %}
    /**
    * Implementation of {{pub_interface}}::publish{{signal.name|capital}}
    */
    void publish{{signal.name|capital}}(
        {%- for param in signal.params -%}
            {{param|cpp14Param: true}}{% unless forloop.last %},{% endunless -%}
        {%- endfor -%}
    ) const override;
{% endfor %}
private:
    // Subscribers informed about any property change or singal emited in {{interface.name}}
    std::vector<std::reference_wrapper<{{sub_class}}>> m_allChangesSubscribers;
{% for property in interface.properties %}
    // Next free unique identifier to subscribe for the {{property.name | capital}} change.
    long m_{{property.name | capital | lowerFirst}}ChangedCallbackNextId = 0;
    // Subscribed callbacks for the {{property.name | capital}} change.
    std::map<long, {{interface.name | capital}}{{property.name | capital}}PropertyCb> m_{{property.name|capital| lowerFirst}}Callbacks;
{% endfor %}
{% for signal in interface.signals %}
    // Next free unique identifier to subscribe for the {{signal.name | capital}} emission.
    long m_{{signal.name | capital | lowerFirst}}SignalCallbackNextId = 0;
    // Subscribed callbacks for the {{signal.name | capital}} emission.
    std::map<long, {{interface.name | capital}}{{signal.name | capital}}SignalCb > m_{{signal.name|capital| lowerFirst}}Callbacks;
{% endfor %}
};
{{nl}}
} // namespace {{ module.name | capital }}
} // namespace {{ system.name | capital }}
