{% comment %} // Copyright (c) ApiGear UG 2020 {% endcomment -%}
#pragma once

#ifndef JSON_USE_IMPLICIT_CONVERSIONS
#define JSON_USE_IMPLICIT_CONVERSIONS 0
#endif
#include <nlohmann/json.hpp>
#include "{{module.name|identifier}}/generated/api/datastructs.api.h"
#include "{{module.name|identifier}}/generated/api/common.h"

namespace {{ system.name | capital }} {
namespace {{ module.name | capital }} {
{% for struct in module.structs %}
{% assign class = struct.name %}
/** Function that converts json formated data into {{class}}.
* The functions signature must follow the nlohmann from_jason function rules.
* It is automatically called in usage j.get<class>();
* @param j an input json formated data
* @param p {{class}} that will be filled with data from j.
*  In case data is malformed or not convertable to {{class}} the function will throw.
*/
void {{ system.name | constant }}_{{ module.name | constant }}_EXPORT from_json(const nlohmann::json& j, {{class}}& p);
/** Function that converts json formated data into {{class}}
* The functions signature must follow the nlohmann to_jason function rules.
* It is automatically called in usage j = p;
* @param j a json formated data that will be filled with data from p
* @param p an input {{class}}/'}
' from which json data will be filled
*/
void {{ system.name | constant }}_{{ module.name | constant }}_EXPORT to_json(nlohmann::json& j, const {{class}}& p);
{% endfor %}
} // namespace {{ module.name | capital }}
} // namespace {{ system.name | capital }}
