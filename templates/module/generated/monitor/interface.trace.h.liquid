{% comment %} // Copyright (c) ApiGear UG 2020 {% endcomment -%}
{{ module | licGPLcpp -}}
{% assign class = interface.name | capital | append: "TracerDecorator" -%}
{% assign interface_class = "I" | append: interface.name | capital %}
{% assign decorator_class = "Abstract" | append: interface.name | capital | append: "Decorator" -%}
{% assign sub_class = "I" | append: interface.name | capital | append: "Subscriber" %}
{% assign pub_class = interface.name | capital | append: "Publisher"%}
#pragma once
#include "{{module.name|identifier}}/generated/api/{{module.name|identifier}}.h"
#include "{{module.name|identifier}}/generated/api/common.h"
#include "{{module.name|identifier}}/generated/core/{{interface.name|lower}}.decorator.h"

namespace ApiGear { namespace PocoImpl { class Tracer; } }

namespace {{ system.name | capital }} {
namespace {{ module.name | capital }} {

class {{interface.name}}Tracer;

class {{ system.name | constant }}_{{ module.name | constant }}_EXPORT {{class}} : public {{decorator_class}}
{
protected:
    explicit {{class}}({{interface_class}}* impl, ApiGear::PocoImpl::Tracer& tracer);
public:
    static {{class}}* connect({{interface_class}}* impl, ApiGear::PocoImpl::Tracer& tracer);
    virtual ~{{class}}();
{{nl}}
    // operations
{% for operation in interface.operations %}
    {{operation|cpp14Return}} {{operation.name}}({{operation|cpp14Params}}) override;
    std::future<{{operation|cpp14Return}}> {{operation.name}}Async({{operation|cpp14Params}}) override;
{% endfor %}
public: // I{{interface}}Subscriber interface
{% for signal in interface.signals %}
    void On{{signal.name | capital}}(
        {%- for param in signal.params -%}
          {{param|cpp14Param}}{% unless forloop.last %},{% endunless -%}
        {%- endfor -%}
        ) override;
{% endfor %}

{% for property in interface.properties %}
    void On{{property.name|capital}}Changed({{property|cpp14Return: true}} Value) override;
{% endfor %}
private:
    std::unique_ptr<{{interface.name}}Tracer> m_tracer;
};
} // namespace {{ module.name | capital }}
} // namespace {{ system.name | capital }}
