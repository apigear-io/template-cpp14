{% comment %} // Copyright (c) ApiGear UG 2020 {% endcomment -%}
#pragma once

#include "{{module.name|identifier}}/generated/api/{{module.name|identifier}}.h"

namespace ApiGear { namespace PocoImpl { class Tracer; } }

namespace {{ system.name | capital }} {
namespace {{ module.name | capital }} {


{% assign class = interface.name | append: "Tracer" %}

/**
* A helper class for tracing.
* Builds the trace info with state and operations specific for {{interface.name}} and pass to PocoImpl::Tracer.
*/
class {{class}}
{
public:
  /**
  * ctor
  * @param tracer A tracer object to which the information about the state and operations is put.
  */
  {{class}}(ApiGear::PocoImpl::Tracer& tracer);
  /** dtor */
  virtual ~{{class}}() = default;
  /**
  * Prepares the {{interface.name}} object state in a nlohmann::json format and puts to a tracer.
  * @param The {{interface.name}} object to trace.
  */
  void capture_state(I{{interface.name}}* obj);
  {% for operation in interface.operations %}
  /**
  * Prepares information about the {{operation.name}} call in a nlohmann::json format and puts to a tracer.
  * @param The {{interface.name}} object to trace.
  */
  void trace_{{operation.name}}({{operation | cpp14Params}});
  {% endfor %}
private:
  /**
  * A tracer object to which the information about the state and operations is put.
  */
  ApiGear::PocoImpl::Tracer& m_tracer;
};

} // namespace {{ module.name | capital }}
} // namespace {{ system.name | capital }}
