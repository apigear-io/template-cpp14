{% comment %} // Copyright (c) ApiGear UG 2020 {% endcomment -%}
{{ module | licGPLcpp }}
{% assign class = interface.name | capital | append: "TracerDecorator" -%}
{% assign decorator_class = "Abstract" | append: interface.name | capital | append: "Decorator" -%}
{% assign interface_class = "I" | append: interface.name | capital %}
{% assign sub_class = "I" | append: interface.name | capital | append: "Subscriber" %}
{% assign pub_class = interface.name | capital | append: "Publisher"%}

#include "{{module.name|identifier}}/generated/monitor/{{interface.name|lower}}.trace.h"
#include "{{module.name|identifier}}/generated/monitor/{{interface.name|lower}}.tracer.h"

using namespace {{ system.name | capital }}::{{ module.name | capital }};
{{class}}::{{class}}({{interface_class}}* impl, ApiGear::PocoImpl::Tracer* tracer)
    : {{decorator_class}}(impl)
    , m_tracer(std::make_unique<{{interface.name}}Tracer>(tracer))
{
}
{{class}}::~{{class}}() = default;
{{class}}* {{class}}::connect({{interface_class}}* impl, ApiGear::PocoImpl::Tracer* tracer)
{
    return new {{class}}(impl, tracer);
}

{% for operation in interface.operations %}


{% if operation.description != "" %}
/**
   \brief {{operation.description}}
*/
{% endif %}
{{operation|cpp14Return}} {{class}}::{{operation.name}}({{operation|cpp14Params}})
{
    m_tracer->trace_{{operation.name}}({% for param in operation.params %}{{param.name}}{% unless forloop.last %},{% endunless %}{% endfor %});
    return {{decorator_class}}::{{operation.name}}({% for param in operation.params %}{{param.name}}{% unless forloop.last %},{% endunless %}{% endfor %});
}

{% capture returnType %}{{operation|cpp14Return}}{% endcapture %}
std::future<{{returnType}}> {{class}}::{{operation.name}}Async({{operation|cpp14Params}})
{
    m_tracer->trace_{{operation.name}}({% for param in operation.params %}{{param.name}}{% unless forloop.last %},{% endunless %}{% endfor %});
    return {{decorator_class}}::{{operation.name}}Async({% for param in operation.params %}{{param.name}}{% unless forloop.last %},{% endunless %}{% endfor %});
}

{% endfor %}

{% for signal in interface.signals %}
void {{class}}::On{{signal.name | capital}}(
        {% for param in signal.params -%}
          {{param|cpp14Param}}{% unless forloop.last %},{% endunless -%}
        {% endfor -%}
        )
{
    {% for param in signal.params %}
    (void) {{param.name}};
    {% endfor %}
    //m_tracer->trace_{{signal.name | capital}}(
    {% for param in signal.params -%}
        {{param.name}}{% unless forloop.last %},{% endunless -%}
    {% endfor -%}
    );
}
{% endfor %}

{% for property in interface.properties %}
void {{class}}::On{{property.name|capital}}Changed({{property|cpp14Return: true}})
{
    m_tracer->capture_state(this);
}
{% endfor %}
