{% comment %} // Copyright (c) ApiGear UG 2020 {% endcomment -%}

{% assign class = interface.name | capital | append: "TraceDecorator" -%}
{% assign interface_class = "I" | append: interface.name | capital %}
{% assign sub_class = "I" | append: interface.name | capital | append: "Subscriber" %}
{% assign pub_class = "I" | append: interface.name | capital | append: "Publisher"%}
#pragma once
#include "{{module.name|identifier}}/generated/api/{{module.name|identifier}}.h"
#include "{{module.name|identifier}}/generated/api/common.h"
#include <memory>

namespace ApiGear { namespace PocoImpl { class Tracer; } }

namespace {{ system.name | capital }} {
namespace {{ module.name | capital }} {

class {{interface.name}}Tracer;

class {{ system.name | constant }}_{{ module.name | constant }}_EXPORT {{class}} : public {{interface_class}}, public {{sub_class}}
{
protected:
    /** 
    * ctor
    * Subscribes for singal emmission.
    * @param impl The {{interface.name}} object to trace.
    * @param tracer A Poco tracer to which traces are put, wrapped with relevant object info.
    */
    explicit {{class}}({{interface_class}}& impl, ApiGear::PocoImpl::Tracer& tracer);
public:
    /** 
    * Use this function to get the {{class}} object.
    * @param impl The {{interface.name}} object to trace.
    * @param tracer A Poco tracer to which traces are put, wrapped with relevant object info.
    */
    static std::unique_ptr<{{class}}> connect({{interface_class}}& impl, ApiGear::PocoImpl::Tracer& tracer);
    /**
    * dtor
    * Unsubscribes from signal emision.
    */
    virtual ~{{class}}();
{{nl}}

{% for operation in interface.operations %}
    /** Traces {{operation.name}} and forwards call to {{interface.name}} implementation. */
    {{operation|cpp14Return}} {{operation.name| lowerFirst}}({{operation|cpp14Params}}) override;
    /** Traces {{operation.name}} and forwards call to {{interface.name}} implementation. */
    std::future<{{operation|cpp14Return}}> {{operation.name| lowerFirst}}Async({{operation|cpp14Params}}) override;
    {{nl}}
{% endfor %}

{% for property in interface.properties %}
    /** Forwards call to {{interface.name}} implementation. */
    void set{{property.name|capital}}({{ property|cpp14Param }}) override;
    /** Forwards call to {{interface.name}} implementation. */
    {{property|cpp14Return: true}} get{{property.name | capital}}() const override;
    {{nl}}    
{% endfor %}

{% for signal in interface.signals %}
    /**
    Traces {{signal.name}} emission.
    */
    void on{{signal.name | capital}}(
    {%- for param in signal.params -%}
    {{param|cpp14Param}}{% unless forloop.last %},{% endunless -%}
    {%- endfor -%}
    ) override;
{% endfor %}
{% for property in interface.properties %}
    /**
    Traces {{property.name}} changed.
    */
    void on{{property.name|capital}}Changed({{property|cpp14Return: true}} {{property.name}}) override;
{% endfor %}

    /**
    * Access to a publisher, use it to subscribe for {{interface.name}} changes and signal emission.
    * @return The publisher for {{interface.name}}.
    */
    {{pub_class}}& _getPublisher() const override;
private:
    /** A tracer that provides the traces for given {{interface.name}} object. */
    std::unique_ptr<{{interface.name}}Tracer> m_tracer;
    /** The {{interface.name}} object which is traced */
    {{interface_class}}& m_impl;
};
} // namespace {{ module.name | capital }}
} // namespace {{ system.name | capital }}
