{% comment %} // Copyright (c) ApiGear UG 2020 {% endcomment -%}

{% assign class = interface.name | capital | append: "TraceDecorator" -%}
{% assign interface_class = "I" | append: interface.name | capital %}
{% assign sub_class = "I" | append: interface.name | capital | append: "Subscriber" %}
{% assign pub_class = "I" | append: interface.name | capital |  append: "Publisher"%}

#include "{{module.name|identifier}}/generated/monitor/{{interface.name|lower}}.tracedecorator.h"
#include "{{module.name|identifier}}/generated/monitor/{{interface.name|lower}}.tracer.h"

using namespace {{ system.name | capital }}::{{ module.name | capital }};
{{class}}::{{class}}({{interface_class}}& impl, ApiGear::PocoImpl::Tracer& tracer)
    : m_tracer(std::make_unique<{{interface.name}}Tracer>(tracer))
    , m_impl(impl)
{
        m_impl._getPublisher().subscribeToAllChanges(*this);
}
{{class}}::~{{class}}()
{
    m_impl._getPublisher().unsubscribeFromAllChanges(*this);
}

std::unique_ptr<{{class}}> {{class}}::connect({{interface_class}}& impl, ApiGear::PocoImpl::Tracer& tracer)
{
    return std::unique_ptr<{{class}}>(new {{class}}(impl, tracer));
}

{% for operation in interface.operations %}
{{operation|cpp14Return}} {{class}}::{{operation.name| lowerFirst}}({{operation|cpp14Params}})
{
    m_tracer->trace_{{operation.name}}({% for param in operation.params %}{{param.name}}{% unless forloop.last %},{% endunless %}{% endfor %});
    return m_impl.{{operation.name| lowerFirst}}({% for param in operation.params %}{{param.name}}{% unless forloop.last %},{% endunless %}{% endfor %});
}

{% capture returnType %}{{operation|cpp14Return}}{% endcapture %}
std::future<{{returnType}}> {{class}}::{{operation.name| lowerFirst}}Async({{operation|cpp14Params}})
{
    m_tracer->trace_{{operation.name}}({% for param in operation.params %}{{param.name}}{% unless forloop.last %},{% endunless %}{% endfor %});
    return m_impl.{{operation.name| lowerFirst}}Async({% for param in operation.params %}{{param.name}}{% unless forloop.last %},{% endunless %}{% endfor %});
}

{% endfor %}

{% for property in interface.properties %}
void {{class}}::set{{property.name|capital}}({{property|cpp14Param}})
{
    m_impl.set{{property.name|capital}}({{property.name}});
}

{{property|cpp14Return: true}} {{class}}::get{{property.name | capital}}() const
{
    return m_impl.get{{property.name | capital}}();
}

{% endfor %}

{% for signal in interface.signals %}
void {{class}}::on{{signal.name | capital}}(
{%- for param in signal.params -%}
{{param|cpp14Param}}{% unless forloop.last %},{% endunless -%}
{%- endfor -%}
)
{
    m_tracer->trace_{{signal.name}}(
    {% for param in signal.params -%}
    {{param.name}}{% unless forloop.last %},{% endunless -%}
    {% endfor -%});
}
{{nl}}
{% endfor %}
{% for property in interface.properties %}
void {{class}}::on{{property.name|capital}}Changed({{property|cpp14Return: true}} /*{{property.name}}*/)
{
    m_tracer->capture_state(this);
}
{{nl}}
{% endfor %}


{{pub_class}}& {{class}}::_getPublisher() const
{
    return m_impl._getPublisher();
}