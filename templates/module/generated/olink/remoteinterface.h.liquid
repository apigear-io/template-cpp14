{% comment %} // Copyright (c) ApiGear UG 2020 {% endcomment -%}
{{ module | licGPLcpp -}}
{% assign class = interface.name |prepend:"Remote"-%}
{% assign interface_class = "I" | append: interface.name | capital -%}
{% assign sub_class = "I" | append: interface.name | capital | append: "Subscriber" %}
{% assign pub_interface = "I" | append: interface.name | capital | append: "Publisher"%}
#pragma once

#include "{{module.name|identifier}}/generated/api/{{module.name|identifier}}.h"
#include "{{module.name|identifier}}/generated/api/common.h"
#include "{{module.name|identifier}}/generated/core/{{interface.name|lower}}.data.h"

#include "olink/clientnode.h"
#include "apigear/olink/olinkclient.h"

#include <future>
#include <memory>

namespace {{ system.name | capital }} {
namespace {{ module.name | capital }} {
namespace olink {
/**
* Remote {{interface.name}} implemented with OLink. 
* Handles connnectionn with {{interface.name}} service.
* Sends and receives data over the network with ObjectLink protocol. 
* see https://objectlinkprotocol.net for ObjectLink details.
* Use on client side to request changes of the {{interface.name}} on the server side 
* and to subscribe for the {{interface.name}} changes.
*/
class {{ system.name | constant }}_{{ module.name | constant }}_EXPORT {{class}} : public {{interface_class}}, public ApiGear::ObjectLink::IObjectSink
{
public:

    /**
    * ctor
    * @param registry The global registry with the sinks and client nodes.
    * @param client Holds the socket, manages the connection and provides ClientNode
    *   which is an abstraction layer between the Client and {{class}}.
    */
    explicit {{class}}(ApiGear::ObjectLink::ClientRegistry& registry, ApiGear::PocoImpl::OLinkClient& client);
    virtual ~{{class}}() override;


{% for property in interface.properties %}
    /**
    * Property getter
    * @return Locally stored locally value for {{property.name|capital}}.
    */
    {{property|cpp14Return: true}} {{property.name}}() const override;
    /**
    * Request setting a property on the {{interface.name}} service.
    * @param The value to which set request is send for the {{property.name|capital}}.
    */
    void set{{property.name|capital}}({{property|cpp14Param}}) override;
{% endfor %}
{% for operation in interface.operations %}
    /**
    * Remote call of {{interface_class}}::{{operation.name}} on the {{interface.name}} service.
    * Uses {{operation.name}}Async
    */
    {{operation|cpp14Return}} {{operation.name}}({{operation|cpp14Params}}) override;
    /**
    * Remote call of {{interface_class}}::{{operation.name}} on the {{interface.name}} service.
    */
    std::future<{{operation|cpp14Return}}> {{operation.name}}Async({{operation|cpp14Params}}) override;
{% endfor %}

    /** The publisher to subscribe to. */
    {{pub_interface}}& _getPublisher() const override;
    
    /**
    * Informs if the connection is established and the remote interface is operable.
    * @return true if remote interface is operable, false otherwise.
    */
    bool isReady() const;

    /**
    * The name of the object for which this sink is created, object on server side has to have the same name.
    * It serves as an identifier for the client registry, it has to be uniqe for the pair sink object - client node.
    * Passed in the olink messages as an object identifier.
    */
    std::string olinkObjectName() override;
    
    /**
    * Forwards information about singal emission to publisher.
    * @param name The name of the emited signal.
    * @param args The arguments for the signal.
    */
    void olinkOnSignal(std::string name, nlohmann::json args) override;
    
    /**
    * Forwards information about the property with the object name to publisher and updates local state.
    * @param name The name of the emited signal.
    * @param args The arguments for the signal.
    */
    void olinkOnPropertyChanged(std::string name, nlohmann::json value) override;
    
    /** Informs this object sink that connetion was is established.
    * @param name The name of the object for which link was established.
    * @param props Initial values obtained from the {{interface.name}} service
    * @param the initialized link endpoint for this sink.
    */
    void olinkOnInit(std::string name, nlohmann::json props, ApiGear::ObjectLink::IClientNode *node) override;
    /**
    * Informs this objec source that the link was disconnected and cannot be used anymore.
    * WARNING DOROTA: it is never called.
    */
    void olinkOnRelease() override;

private:
    /**
    * Applies recived data to local state and publishes changes to subscribers.
    * @param the data recived from {{interface.name}} service.
    */
    void applyState(const nlohmann::json& fields);

{% for property in interface.properties %}
    /**  Updates local value for {{property.name|capital}} and informs subscriber about the change*/
    void set{{property.name|capital}}Local({{property|cpp14Param}});
{% endfor %}
    
    /** Local storage for properties values. */
    {{interface.name | capital}}Data m_data;

    /**
    * An Olink client node used to connect with a Olink {{interface.name}} service for object given with olinkObjectName() .
    * An abstraction layer over the socket for the {{class}}.
    * WARNING DOROTA if there's a sink already in registry for same name, it is silently disconnected, without the informing
    * it may send requests as long as the pointer to node is valid, but will not receive any data the isReady will not tell the true.
    */
    ApiGear::ObjectLink::IClientNode* m_node = nullptr;
    /** 
    * Registry linking client nodes with sinks for the olinkObjectName().
    * The registerd olinkObjects name must be unique.  
    */
    ApiGear::ObjectLink::ClientRegistry& m_registry;
    /** The publisher for {{interface.name}} */
    std::unique_ptr<{{pub_interface}}> m_publisher;
};
} // namespace olink
} // namespace {{ module.name | capital }}
} // namespace {{ system.name | capital }}
