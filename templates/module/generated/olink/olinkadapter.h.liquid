{% comment %} // Copyright (c) ApiGear UG 2020 {% endcomment -%}
{{ module | licGPLcpp -}}
{% capture class%}OLink{{interface.name}}Adapter{% endcapture %}
#pragma once

#include "generated/api/{{module.name|identifier}}.h"
#include "generated/api/{{module.name|identifier}}_common.h"
#include "olink/remotenode.h"

// using namespace ApiGear;
// using namespace ApiGear::ObjectLink;
namespace {{ system.name | capital }} {
namespace {{ module.name | capital }} {
class {{ system.name | constant }}_{{ module.name | constant }}_EXPORT {{class}} : public ApiGear::ObjectLink::IObjectSource, public I{{interface}}Subscriber
{
public:
    explicit {{class}}(I{{interface}}* impl, ApiGear::ObjectLink::RemoteRegistry& registry);
    virtual ~{{class}}() override;
public:
    void publishState();
    nlohmann::json captureState();
    void applyState(const nlohmann::json& state);
    
public: // IObjectSource interface
    std::string olinkObjectName() override;
    nlohmann::json olinkInvoke(std::string name, nlohmann::json args) override;
    void olinkSetProperty(std::string name, nlohmann::json value) override;
    void olinkLinked(std::string name, ApiGear::ObjectLink::IRemoteNode *node) override;
    void olinkUnlinked(std::string name) override;
    nlohmann::json olinkCollectProperties() override;

public: // I{{interface}}Subscriber interface
{% for signal in interface.signals %}
    void On{{signal.name | capital}}(
        {%- for param in signal.params -%}
          {{param|cpp14Param}}{% unless forloop.last %},{% endunless -%}
        {%- endfor -%}
        ) override;
{% endfor %}

{% for property in interface.properties %}
    void On{{property.name|capital}}Changed({{property|cpp14Return: true}} Value) override;
{% endfor %}

private:
    I{{interface}}* m_impl;
    ApiGear::ObjectLink::IRemoteNode *m_node;
    ApiGear::ObjectLink::RemoteRegistry* m_registry;
};
} // namespace {{ module.name | capital }}
} // namespace {{ system.name | capital }}
