{% comment %} // Copyright (c) ApiGear UG 2020 {% endcomment -%}
{{ module | licGPLcpp -}}
{% capture class%}{{interface.name}}Service{% endcapture %}
#pragma once

#include "{{module.name|identifier}}/generated/api/{{module.name|identifier}}.h"
#include "{{module.name|identifier}}/generated/api/common.h"
#include "olink/remotenode.h"

namespace {{ system.name | capital }} {
namespace {{ module.name | capital }} {

/**
* Server side for {{interface.name}} implements the {{interface.name}} service.
* It is a source of data for {{interface.name}} clients.
* Sends and receives data over the network with ObjectLink protocol. 
* see https://objectlinkprotocol.net for Object Link Details
*/
class {{ system.name | constant }}_{{ module.name | constant }}_EXPORT {{class}} : public ApiGear::ObjectLink::IObjectSource, public I{{interface}}Subscriber
{
public:
    /**
    * ctor
    * @param {{interface}} The service source object, the actual {{interface}} object which is exposed for remote clients with olink.
    * @param registry The global registry that keeps track of the object source services associated with network nodes.
    */
    explicit {{class}}(I{{interface}}& {{interface}}, ApiGear::ObjectLink::RemoteRegistry& registry);
    virtual ~{{class}}() override;

    /**
    * The name of the object for which this service is created, object on client side has to have the same name.
    * It serves as an identifier for the source registry, it has to be uniqe for the pair source object - remote node.
    * Passed in the olink messages as an object identifier.
    */
    std::string olinkObjectName() override;
    /**
    * Applies recived method invocation with given arguments on the {{interface}} object.
    * @param name Path of the method to invoke. Contains object name and the method name.
    * @param args Arguments required to invoke a method in json format.
    * @return the result of the invoked method (if applicable) that needs to be sent back to the clients.
    */
    nlohmann::json olinkInvoke(std::string name, nlohmann::json args) override;
    /**
    * Applies recived change property request to {{interface}} object.
    * @param name Path the property to change. Contains object name and the property name.
    * @param args Value in json format requested to set for the property.
    */
    void olinkSetProperty(std::string name, nlohmann::json value) override;
    /**
    * Informs this service source that the link was established.
    * @param name The name of the object for which link was established.
    * @param the initialized link endpoint.
    */
    void olinkLinked(std::string name, ApiGear::ObjectLink::IRemoteNode *node) override;
    /**
    * Informs this service source that the link was disconnected and cannot be used anymore.
    */
    void olinkUnlinked(std::string name) override;

    /**
    * Gets the current state of {{interface}} object.
    * @return the set of properties with their current vlues for the {{interface}} object in json format.
    */
    nlohmann::json olinkCollectProperties() override;

{% for signal in interface.signals %}
    /**
    * Forwards emited {{signal.name}} through network if the connection is established.
    */
    void On{{signal.name | capital}}(
        {%- for param in signal.params -%}
          {{param|cpp14Param}}{% unless forloop.last %},{% endunless -%}
        {%- endfor -%}
        ) override;
{% endfor %}

{% for property in interface.properties %}
    /**
    * Forwards {{property.name}} change through network if the connection is established.
    */
    void On{{property.name|capital}}Changed({{property|cpp14Return: true}} Value) override;
{% endfor %}

private:
    /**
    * The {{interface}} used for object source.
    */
    I{{interface}}& m_{{interface}};
    /**
    * The abstraction over the network layer for this object source.
    */
    ApiGear::ObjectLink::IRemoteNode* m_node;
    /**
    * A global registry that keeps track of object sources associated with their network layer nodes.
    */
    ApiGear::ObjectLink::RemoteRegistry& m_registry;
};
} // namespace {{ module.name | capital }}
} // namespace {{ system.name | capital }}
