{% comment %} // Copyright (c) ApiGear UG 2020 {% endcomment -%}
{% capture class%}{{interface.name}}ServiceAdapter{% endcapture %}

#include "{{module.name|identifier}}/generated/api/datastructs.api.h"
#include "{{module.name|identifier}}/generated/olink/{{interface.name|lower}}service.adapter.h"
#include "{{module.name|identifier}}/generated/core/{{module.name|identifier}}.json.adapter.h"

#include "olink/iremotenode.h"
#include "olink/remoteregistry.h"

#include <iostream>


using namespace {{ system.name | capital }}::{{ module.name | capital }};
using namespace {{ system.name | capital }}::{{ module.name | capital }}::olink;

namespace 
{
const std::string interfaceId = "{{module}}.{{interface}}";
}

{{class}}::{{class}}(I{{interface}}& {{interface}}, ApiGear::ObjectLink::RemoteRegistry& registry)
    : m_{{interface}}({{interface}})
    , m_registry(registry)
{
    m_{{interface}}._getPublisher().subscribeToAllChanges(*this);
    m_registry.addSource(*this);
}

{{class}}::~{{class}}()
{
    m_registry.removeSource(olinkObjectName());
    m_{{interface}}._getPublisher().unsubscribeFromAllChanges(*this);
}

std::string {{class}}::olinkObjectName() {
    return interfaceId;
}

nlohmann::json {{class}}::olinkInvoke(const std::string& methodId, const nlohmann::json& fcnArgs) {
    std::clog << methodId << std::endl;
    const auto& memberMethod = ApiGear::ObjectLink::Name::getMemberName(methodId);
{% for operation in interface.operations %}
    if(memberMethod == "{{operation.name}}") {
{% for param in operation.params %}
        const {{param|cpp14Return}}& {{param}} = fcnArgs.at({{ forloop.index0 }});      
{% endfor %}
{% if operation.type == 'void' %}
        m_{{interface}}.{{operation.name | lowerFirst}}({{ operation.params | map: 'name' | join: ', ' }});
        return nlohmann::json{};
{% else %}
        {{operation|cpp14Return}} result = m_{{interface}}.{{operation.name| lowerFirst}}({{ operation.params | map: 'name' | join: ', ' }});
        return result;
{% endif %}
    }
{% else %}
    // no operations to invoke {% comment %} we generate anyway for consistency {% endcomment %}
    (void) fcnArgs;
{% endfor %}
    return nlohmann::json();
}

void {{class}}::olinkSetProperty(const std::string& propertyId, const nlohmann::json& value) {
    std::clog << propertyId << std::endl;
    const auto& memberProperty = ApiGear::ObjectLink::Name::getMemberName(propertyId);
{% for property in interface.properties %}
    if(memberProperty == "{{property}}") {
        {{property|cpp14Return}} {{property}} = value.get<{{property|cpp14Return}}>();
        m_{{interface}}.set{{property.name|capital}}({{property}});
    }
{% else %}
    // no properties to set {% comment %} we generate anyway for consistency {% endcomment %}
    (void) value;
{% endfor %} 
}

void {{class}}::olinkLinked(const std::string& objetId, ApiGear::ObjectLink::IRemoteNode* /*node*/) {
    std::clog << objetId << std::endl;
}

void {{class}}::olinkUnlinked(const std::string& objetId){
    std::clog << objetId << std::endl;
}

nlohmann::json {{class}}::olinkCollectProperties()
{
    return nlohmann::json::object({
{% for property in interface.properties %}
        { "{{property.name}}", m_{{interface}}.get{{property.name | capital}}() }{% unless forloop.last %},{% endunless %}
{% endfor %}
    });
}

{% for signal in interface.signals %}
void {{class}}::on{{signal.name | capital}}(
        {%- for param in signal.params -%}
          {{param|cpp14Param}}{% unless forloop.last %},{% endunless -%}
        {%- endfor -%}
        )
{
    const nlohmann::json args = { {{ signal.params | map: 'name' | join: ', ' }} };
    const auto& signalId = ApiGear::ObjectLink::Name::createMemberId(olinkObjectName(), "{{signal.name}}");
    for(auto node: m_registry.getNodes(ApiGear::ObjectLink::Name::getObjectId(signalId))) {
        if(node != nullptr) {
            node->notifySignal(signalId, args);
        }
    }
}
{% endfor %}

{% for property in interface.properties %}
void {{class}}::on{{property.name|capital}}Changed({{property|cpp14Return: true}} {{property}})
{
    const auto& propertyId = ApiGear::ObjectLink::Name::createMemberId(olinkObjectName(), "{{property.name}}");
    for(auto node: m_registry.getNodes(ApiGear::ObjectLink::Name::getObjectId(propertyId))) {
        if(node != nullptr) {
            node->notifyPropertyChange(propertyId, {{property}});
        }
    }
}
{% endfor %}

