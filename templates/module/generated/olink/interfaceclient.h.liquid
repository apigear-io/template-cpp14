{% comment %} // Copyright (c) ApiGear UG 2020 {% endcomment -%}
{% assign class = interface.name |append:"Client"-%}
{% assign interface_class = "I" | append: interface.name | capital -%}
{% assign sub_class = "I" | append: interface.name | capital | append: "Subscriber" %}
{% assign pub_interface = "I" | append: interface.name | capital | append: "Publisher"%}
#pragma once

#include "{{module.name|identifier}}/generated/api/common.h"
#include "{{module.name|identifier}}/generated/api/{{module.name|identifier}}.h"
#include "{{module.name|identifier}}/generated/core/{{interface.name|lower}}.data.h"

#include "apigear/olink/iolinkconnector.h"
#include "apigear/olink/logger/logger.h"
#include "olink/iobjectsink.h"

#include <future>
#include <memory>

namespace ApiGear{
namespace ObjectLink{
class IClientNode;
}
}

namespace {{ system.name | capital }} {
namespace {{ module.name | capital }} {
namespace olink {
/**
* Adapts the general OLink Client handler to a {{interface.name}} publisher in a way it provides access 
* to remote {{interface.name}} services. 
* Sends and receives data over the network with ObjectLink protocol, through the communication node. 
* see https://objectlinkprotocol.net for ObjectLink details.
* see https://github.com/apigear-io/objectlink-core-cpp.git for olink client node - abstraction over the network.
* see Apigear::ObjectLink::OLinkConnection for Olink Client Handler implementation.
*     It provides a network implementation and tools to connect {{class}} to it.
* Use on client side to request changes of the {{interface.name}} on the server side 
* and to subscribe for the {{interface.name}} changes.
*/
class {{ system.name | constant }}_{{ module.name | constant }}_EXPORT {{class}} : public {{interface_class}},
    public ApiGear::ObjectLink::IObjectSink,
    public ApiGear::Logger::Logger
{
public:

    /** ctor */
    explicit {{class}}();
    /** dtor */
    virtual ~{{class}}() = default;

{% for property in interface.properties %}
    /**
    * Property getter
    * @return Locally stored locally value for {{property.name|capital}}.
    */
    {{property|cpp14Return: true}} get{{property.name | capital}}() const override;
    /**
    * Request setting a property on the {{interface.name}} service.
    * @param The value to which set request is send for the {{property.name|capital}}.
    */
    void set{{property.name|capital}}({{property|cpp14Param}}) override;
{% endfor %}
{% for operation in interface.operations %}
    /**
    * Remote call of {{interface_class}}::{{operation.name}} on the {{interface.name}} service.
    * Uses {{operation.name}}Async
    */
    {{operation|cpp14Return}} {{operation.name| lowerFirst}}({{operation|cpp14Params}}) override;
    /**
    * Remote call of {{interface_class}}::{{operation.name}} on the {{interface.name}} service.
    */
    std::future<{{operation|cpp14Return}}> {{operation.name| lowerFirst}}Async({{operation|cpp14Params}}) override;
{% endfor %}

    /** The publisher to subscribe to. */
    {{pub_interface}}& _getPublisher() const override;
    
    /**
    * Informs if the {{class}} is ready to send and receive messages.
    * @return true if {{interface.name}} is operable, false otherwise.
    */
    bool isReady() const;

    /**
    * The name of the object for which this sink is created, object on server side has to have the same name.
    * It serves as an identifier for the client registry, it has to be unique for the pair sink object - client node.
    * Passed in the olink messages as an object identifier.
    */
    std::string olinkObjectName() override;
    
    /**
    * Information about signal emission on a server side to all subscribers.
    * @param signalId Unique identifier for the signal emitted from object.
    * @param args The arguments for the signal.
    */
    void olinkOnSignal(const std::string& signalId, const nlohmann::json& args) override;
    
    /**
    * Applies the information about the property changed on server side.
    * @param propertyId Unique identifier of a changed property in object .
    * @param value The value of the property.
    */
    void olinkOnPropertyChanged(const std::string& propertyId, const nlohmann::json& value) override;
    
    /** Informs this object sink that connection was is established.
    * @param interfaceId The name of the object for which link was established.
    * @param props Initial values obtained from the {{interface.name}} service
    * @param the initialized link endpoint for this sink.
    */
    void olinkOnInit(const std::string& interfaceId, const nlohmann::json& props, ApiGear::ObjectLink::IClientNode *node) override;
    /**
    * Informs this object source that the link was disconnected and cannot be used anymore.
    */
    void olinkOnRelease() override;

private:
    /**
    * Applies received data to local state and publishes changes to subscribers.
    * @param the data received from {{interface.name}} service.
    */
    void applyState(const nlohmann::json& fields);

{% for property in interface.properties %}
    /**  Updates local value for {{property.name|capital}} and informs subscriber about the change*/
    void set{{property.name|capital}}Local({{property|cpp14Param}});
{% endfor %}
    
    /** Local storage for properties values. */
    {{interface.name | capital}}Data m_data;

    /** 
    * An abstraction layer over the connection with service for the {{class}}.
    * Handles incoming and outgoing messages.
    * Is given when object is linked with the service.
    */
    ApiGear::ObjectLink::IClientNode* m_node = nullptr;

    /** The publisher for {{interface.name}} */
    std::unique_ptr<{{pub_interface}}> m_publisher;
};
} // namespace olink
} // namespace {{ module.name | capital }}
} // namespace {{ system.name | capital }}
