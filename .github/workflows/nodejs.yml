# This workflow will do a clean install of node dependencies, build the source code and run tests across different versions of node
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-nodejs-with-github-actions

name: Technology Template Test

on:
  pull_request:
    branches: [main]

jobs:
  generate:
    runs-on: ubuntu-latest
    env:
      GITHUB_AUTH_TOKEN: ${{ secrets.WOLFGANG_REPO_PACKAGE_READ }}
      GCP_AUTH_TOKEN: ${{ secrets.GCP_GITHUB_CICD_TECH_TEMPLATE_ACCOUNT_TOKEN }}

    strategy:
      matrix:
        node-version: [16.x]

    steps:
      - uses: actions/checkout@v3
        with:
          submodules: recursive
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}

      - name: Get yarn cache directory path
        id: yarn-cache-dir-path
        run: echo "::set-output name=dir::$(yarn cache dir)"

      - uses: actions/cache@v3
        # use this to check for `cache-hit` (`steps.yarn-cache.outputs.cache-hit != 'true'`)
        id: yarn-cache
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-

      # see https://classic.yarnpkg.com/en/docs/cli/install
      - run: yarn install --frozen-lockfile --link-duplicates
      - run: yarn run test:goldenmaster

  conan_build:
    needs: generate
    name: ${{ matrix.config.name }}
    runs-on: ${{ matrix.config.os }}
    strategy:
      fail-fast: false
      matrix:
        config:
          - { name: "Conan Windows Latest MSVC", os: windows-latest }
          - { name: "Conan Ubuntu Latest GCC", os: ubuntu-latest }
          - { name: "Conan macOS Latest Clang", os: macos-latest }
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: recursive
      - name: Cache conan on Windows
        uses: actions/cache@v3
        if: ${{ matrix.config.os == 'windows-latest'}}
        with:
          path: |
            ~\.conan\data
          key: ${{ matrix.config.os }}-conan-cache-${{ hashFiles('goldenmaster/**/conanfile.py', 'goldenmaster/**/conanfile.txt') }}
          restore-keys: |
            ${{ matrix.config.os }}-conan-cache
      - name: Cache conan on Linux/macOS
        uses: actions/cache@v3
        if: ${{ matrix.config.os != 'windows-latest'}}
        with:
          path: |
            ~/.conan/data
          key: ${{ matrix.config.os }}-conan-cache-${{ hashFiles('goldenmaster/**/conanfile.py', 'goldenmaster/**/conanfile.txt') }}
          restore-keys: |
            ${{ matrix.config.os }}-conan-cache
      - name: Set up Python
        uses: actions/setup-python@v3
        with:
          python-version: 3.9
          cache: "pip"
          cache-dependency-path: ".github/workflows/conan-requirements.txt"
      - name: Install Conan
        run: pip install -r .github/workflows/conan-requirements.txt
      - name: Create default profile
        run: conan profile new default --detect
      - name: Set C++11 on Linux
        run: conan profile update settings.compiler.libcxx=libstdc++11 default
        if: ${{ matrix.config.os == 'ubuntu-latest'}}
      - name: Install CMake
        run: conan install cmake/3.22.2@ -g=virtualrunenv
      - name: Run conan build
        working-directory: goldenmaster
        run: chmod +x ./test_conan.sh && ./test_conan.sh
        if: ${{ matrix.config.os != 'windows-latest'}}
      - name: Run conan build
        working-directory: goldenmaster
        run: cmd.exe /c 'test_conan.bat'
        if: ${{ matrix.config.os == 'windows-latest'}}

  cmake_build:
    needs: generate
    name: ${{ matrix.config.name }}
    runs-on: ${{ matrix.config.os }}
    strategy:
      fail-fast: false
      matrix:
        config:
          - { name: "CMake Ubuntu Latest GCC", os: ubuntu-latest }
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: recursive
      - name: Install dependencies
        run: sudo apt-get install -y cmake libpoco-dev nlohmann-json3-dev
      - name: Install catch2
        run: git clone --branch v2.13.8 --depth 1 https://github.com/catchorg/Catch2.git && cd Catch2 && cmake -Bbuild -H. -DBUILD_TESTING=OFF && sudo cmake --build build/ --target install
      - name: Run cmake
        working-directory: goldenmaster
        run: cmake -Bbuild -H. -DCMAKE_INSTALL_PREFIX=tmp && cmake --build build/ --target check && cmake --build build/ --target install
